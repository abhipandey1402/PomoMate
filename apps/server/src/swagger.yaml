openapi: 3.0.3
info:
  version: 1.3.1
  title: "Pomomate APIs Documentation"
  description: "Comprehensive documentation for the Pomomate APIs"
  termsOfService: "http://example.com/terms/"
  contact:
    name: "API Support"
    url: "http://example.com/support"
    email: "support@example.com"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "{host}/api/v1"
    description: "API server"
    variables:
      host:
        default: "http://localhost:8080"
        description: "Default host URL"
paths:
  /users:
    get:
      summary: "Retrieve a list of users"
      description: "Fetch all users available in the database."
      operationId: "getUsers"
      responses:
        "200":
          description: "A JSON array of user objects"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: "Create a new user"
      description: "Add a new user to the database."
      operationId: "createUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: "User successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid input"
  /users/{id}:
    get:
      summary: "Retrieve a specific user by ID"
      description: "Fetch detailed information about a single user by their unique ID."
      operationId: "getUserById"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of the user to fetch"
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: "Details of the user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "User not found"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
    NewUser:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: "Jane Doe"
        email:
          type: string
          example: "jane.doe@example.com"
  responses:
    NotFound:
      description: "Entity not found."
