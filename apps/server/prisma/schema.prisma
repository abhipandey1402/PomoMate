// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  notStarted
  inProgress
  completed
  cancelled
}

enum TimerStatus {
  active
  paused
  completed
  cancelled
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  fullName String
  password String
  role     String @default("user") // Role: user, admin, team admin

  sessionsOwned  Session[]         @relation("SessionOwner")
  sessionsJoined SessionFollower[]
  tasksOwned     Task[]            @relation("TaskOwner")
  sharedTasks    TaskShare[]       @relation("TaskParticipants")

  teamsOwned  Team[] @relation("TeamOwner")
  teamsJoined Team[] @relation("TeamMembers")

  timers            Timer[] // Added relation to Timer
  notifications     Notification[]
  UserConfig        UserConfig?
  avatarUrl         String? // Optional profile picture
  preferences       Json? // User-specific preferences
  completedSessions Int            @default(0) // Total completed sessions

  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([username])
  @@index([fullName])
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus // notStarted, inProgress, completed, cancelled
  ownerId     String
  owner       User        @relation("TaskOwner", fields: [ownerId], references: [id])
  isPublic    Boolean     @default(false) // Private by default
  teamId      String? // Optional: Team this task is shared with
  team        Team?       @relation(fields: [teamId], references: [id])
  sharedWith  TaskShare[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskShare {
  id     String @id @default(cuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id])
  userId String
  user   User   @relation("TaskParticipants", fields: [userId], references: [id])
}

model Session {
  id        String  @id @default(cuid())
  name      String
  duration  Int
  breakTime Int
  isPublic  Boolean @default(false) // Private by default

  ownerId   String
  owner     User              @relation("SessionOwner", fields: [ownerId], references: [id])
  teamId    String?
  team      Team?             @relation(fields: [teamId], references: [id])
  followers SessionFollower[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SessionFollower {
  id        String  @id @default(cuid())
  sessionId String
  session   Session @relation(fields: [sessionId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}

model Team {
  id          String  @id @default(uuid())
  name        String // Team name
  description String? // Optional description
  isPublic    Boolean @default(false) // Private by default

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  ownerId  String
  owner    User      @relation("TeamOwner", fields: [ownerId], references: [id])
  members  User[]    @relation("TeamMembers") // Team members
  sessions Session[] @relation
  tasks    Task[]    @relation
}

model Timer {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id]) // Bidirectional relation
  duration      Int // Total duration in seconds
  breakTime     Int // Break duration in seconds
  remainingTime Int? // Remaining time in seconds, nullable
  status        TimerStatus @default(active) // "active", "paused", or "completed" "cancelled"
  completed     Boolean     @default(false) // Whether the session was successfully completed
  createdAt     DateTime    @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model UserConfig {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  pomodoroTime       Int     @default(1500) // Default: 1500 seconds
  shortBreakTime     Int     @default(300) // Default: 300 seconds
  longBreakTime      Int     @default(900) // Default: 900 seconds
  autoStartBreaks    Boolean @default(false)
  autoStartPomodoros Boolean @default(false)
  longBreakInterval  Int     @default(4) // Long break after 4 pomodoros

  autoCheckTasks  Boolean @default(false)
  autoSwitchTasks Boolean @default(true)

  alarmSound    String? // E.g., "Kitchen", "Bell"
  alarmVolume   Int     @default(50) // Volume in percentage
  alarmRepeat   Int     @default(1) // Number of times the alarm repeats
  tickingSound  String? // E.g., "Clock"
  tickingVolume Int     @default(50) // Volume in percentage

  colorTheme String  @default("red") // Theme color
  hourFormat String  @default("24-hour") // 12-hour or 24-hour format
  darkMode   Boolean @default(false)

  reminderTime       Int? // Reminder before session ends, in minutes
  mobileAlarmEnabled Boolean @default(false)

  integrations Json? // Integration settings like Todoist or Webhook

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
